/*
 * Authentication API
 * The signup module has an action API, which is used for the following reasons. 1) To initiate the login page, if authentication is applicable for the  user, during action authorize  granting access to the system . 2) To validate the login, along with the password of the user 3) To cancel the request  when authentication process is cancelled .4) To support the actions login and logout mechanism
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rubiyakadarbasha@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.api.assignment.models;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.api.assignment.models.ValidationErorrs;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * FailureResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-02-28T18:07:05.498+05:30")
public class FailureResponse {
  @JsonProperty("resCode")
  private String resCode = null;

  @JsonProperty("resMsg")
  private String resMsg = null;

  @JsonProperty("valErrors")
  private List<ValidationErorrs> valErrors = new ArrayList<ValidationErorrs>();

  public FailureResponse resCode(String resCode) {
    this.resCode = resCode;
    return this;
  }

   /**
   * Indicates the response code
   * @return resCode
  **/
  @ApiModelProperty(required = true, value = "Indicates the response code")
  public String getResCode() {
    return resCode;
  }

  public void setResCode(String resCode) {
    this.resCode = resCode;
  }

  public FailureResponse resMsg(String resMsg) {
    this.resMsg = resMsg;
    return this;
  }

   /**
   * Indicates the response message
   * @return resMsg
  **/
  @ApiModelProperty(required = true, value = "Indicates the response message")
  public String getResMsg() {
    return resMsg;
  }

  public void setResMsg(String resMsg) {
    this.resMsg = resMsg;
  }

  public FailureResponse valErrors(List<ValidationErorrs> valErrors) {
    this.valErrors = valErrors;
    return this;
  }

  public FailureResponse addValErrorsItem(ValidationErorrs valErrorsItem) {
    this.valErrors.add(valErrorsItem);
    return this;
  }

   /**
   * Indicates the validation errors while updating preferences
   * @return valErrors
  **/
  @ApiModelProperty(required = true, value = "Indicates the validation errors while updating preferences")
  public List<ValidationErorrs> getValErrors() {
    return valErrors;
  }

  public void setValErrors(List<ValidationErorrs> valErrors) {
    this.valErrors = valErrors;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailureResponse failureResponse = (FailureResponse) o;
    return Objects.equals(this.resCode, failureResponse.resCode) &&
        Objects.equals(this.resMsg, failureResponse.resMsg) &&
        Objects.equals(this.valErrors, failureResponse.valErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resCode, resMsg, valErrors);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailureResponse {\n");
    
    sb.append("    resCode: ").append(toIndentedString(resCode)).append("\n");
    sb.append("    resMsg: ").append(toIndentedString(resMsg)).append("\n");
    sb.append("    valErrors: ").append(toIndentedString(valErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

